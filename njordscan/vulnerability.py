"""
🛡️ Vulnerability Data Model for NjordScan v1.0.0

Enhanced vulnerability representation with support for AI analysis,
intelligence correlation, and advanced metadata.
"""

from dataclasses import dataclass
from typing import Optional, List, Dict, Any
from enum import Enum

class Severity(Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class Confidence(Enum):
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"

@dataclass
class Vulnerability:
    """Standardized vulnerability object."""
    
    id: str
    title: str
    severity: Severity
    confidence: Confidence
    description: str
    fix: str
    reference: str
    vuln_type: str = ""  # Type of vulnerability (XSS, SQLi, etc.)
    location: str = ""   # Location where vulnerability was found
    file_path: Optional[str] = None
    line_number: Optional[int] = None
    code_snippet: Optional[str] = None
    framework: str = ""
    module: str = ""
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}
        
        # Ensure severity and confidence are enums
        if isinstance(self.severity, str):
            self.severity = Severity(self.severity.lower())
        if isinstance(self.confidence, str):
            self.confidence = Confidence(self.confidence.lower())
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert vulnerability to dictionary."""
        return {
            'id': self.id,
            'title': self.title,
            'severity': self.severity.value,
            'confidence': self.confidence.value,
            'description': self.description,
            'fix': self.fix,
            'reference': self.reference,
            'vuln_type': self.vuln_type,
            'location': self.location,
            'file_path': self.file_path,
            'line_number': self.line_number,
            'code_snippet': self.code_snippet,
            'framework': self.framework,
            'module': self.module,
            'metadata': self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Vulnerability':
        """Create vulnerability from dictionary."""
        return cls(
            id=data['id'],
            title=data['title'],
            severity=Severity(data['severity']),
            confidence=Confidence(data['confidence']),
            description=data['description'],
            fix=data['fix'],
            reference=data['reference'],
            vuln_type=data.get('vuln_type', ''),
            location=data.get('location', ''),
            file_path=data.get('file_path'),
            line_number=data.get('line_number'),
            code_snippet=data.get('code_snippet'),
            framework=data.get('framework', ''),
            module=data.get('module', ''),
            metadata=data.get('metadata', {})
        )

class VulnerabilityIdGenerator:
    """Generate unique vulnerability IDs."""
    
    def __init__(self):
        self.counters = {}
    
    def generate_id(self, module: str, vuln_type: str = "") -> str:
        """Generate a unique vulnerability ID."""
        key = f"{module}_{vuln_type}" if vuln_type else module
        
        if key not in self.counters:
            self.counters[key] = 0
        
        self.counters[key] += 1
        
        if vuln_type:
            return f"NJORD-{module.upper()}-{vuln_type.upper()}-{self.counters[key]:03d}"
        else:
            return f"NJORD-{module.upper()}-{self.counters[key]:03d}"