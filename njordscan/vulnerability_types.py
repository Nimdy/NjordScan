"""
Standardized Vulnerability Types for NjordScan

This module provides a centralized registry of vulnerability types with their
associated CWE codes, OWASP categories, and remediation information.
"""

import re
from dataclasses import dataclass, field
from enum import Enum
from typing import List, Dict, Any, Optional

class VulnerabilityCategory(Enum):
    """OWASP Top 10 2021 Categories (current standard).
    
    Note: OWASP Top 10 2025 is expected to be released in the first half of 2025.
    This will be updated when the official release is available.
    """
    BROKEN_ACCESS_CONTROL = "A01:2021 - Broken Access Control"
    CRYPTOGRAPHIC_FAILURES = "A02:2021 - Cryptographic Failures"
    INJECTION = "A03:2021 - Injection"
    INSECURE_DESIGN = "A04:2021 - Insecure Design"
    SECURITY_MISCONFIGURATION = "A05:2021 - Security Misconfiguration"
    VULNERABLE_COMPONENTS = "A06:2021 - Vulnerable and Outdated Components"
    AUTHENTICATION_FAILURES = "A07:2021 - Identification and Authentication Failures"
    SOFTWARE_INTEGRITY_FAILURES = "A08:2021 - Software and Data Integrity Failures"
    SECURITY_LOGGING_MONITORING_FAILURES = "A09:2021 - Security Logging and Monitoring Failures"
    SSRF = "A10:2021 - Server-Side Request Forgery"
    AI_SPECIFIC = "AI-Specific Security"
    LLM_APPLICATIONS = "OWASP Top 10 for LLM Applications 2025"
    FRAMEWORK_SPECIFIC = "Framework-Specific"
    CLOUD_INFRASTRUCTURE = "Cloud & Infrastructure Security"
    INFORMATION_DISCLOSURE = "Information Disclosure"
    OTHER = "Other"

class CWECode(Enum):
    """Common Weakness Enumeration (CWE) codes."""
    CWE_79 = "CWE-79"  # Cross-site Scripting
    CWE_89 = "CWE-89"  # SQL Injection
    CWE_78 = "CWE-78"  # OS Command Injection
    CWE_22 = "CWE-22"  # Path Traversal
    CWE_352 = "CWE-352"  # Cross-Site Request Forgery
    CWE_434 = "CWE-434"  # Unrestricted Upload of File
    CWE_862 = "CWE-862"  # Missing Authorization
    CWE_863 = "CWE-863"  # Incorrect Authorization
    CWE_798 = "CWE-798"  # Use of Hard-coded Credentials
    CWE_311 = "CWE-311"  # Missing Encryption of Sensitive Data
    CWE_327 = "CWE-327"  # Use of a Broken or Risky Cryptographic Algorithm
    CWE_330 = "CWE-330"  # Use of Insufficiently Random Values
    CWE_200 = "CWE-200"  # Exposure of Sensitive Information
    CWE_522 = "CWE-522"  # Insufficiently Protected Credentials
    CWE_284 = "CWE-284"  # Improper Access Control
    CWE_287 = "CWE-287"  # Improper Authentication
    CWE_611 = "CWE-611"  # Improper Restriction of XML External Entity Reference
    CWE_732 = "CWE-732"  # Incorrect Permission Assignment for Critical Resource
    CWE_776 = "CWE-776"  # Improper Restriction of Recursive Entity References in DTDs
    CWE_400 = "CWE-400"  # Uncontrolled Resource Consumption
    CWE_502 = "CWE-502"  # Deserialization of Untrusted Data
    CWE_601 = "CWE-601"  # URL Redirection to Untrusted Site
    CWE_614 = "CWE-614"  # Sensitive Cookie in HTTPS Session Without 'Secure' Attribute
    CWE_693 = "CWE-693"  # Protection Mechanism Failure
    CWE_749 = "CWE-749"  # Exposed Dangerous Method or Function
    CWE_759 = "CWE-759"  # Use of a One-Way Hash without a Salt
    CWE_760 = "CWE-760"  # Use of a One-Way Hash with a Predictable Salt
    CWE_770 = "CWE-770"  # Allocation of Resources Without Limits or Throttling
    CWE_778 = "CWE-778"  # Insufficient Logging
    CWE_779 = "CWE-779"  # Improper Handling of Insufficient Logging
    CWE_780 = "CWE-780"  # Use of RSA Algorithm without OAEP
    CWE_789 = "CWE-789"  # Uncontrolled Resource Consumption (Uncontrolled Array Size)
    CWE_827 = "CWE-827"  # Improper Control of Search Path Element
    CWE_829 = "CWE-829"  # Inclusion of Sensitive Information in Source Code
    CWE_922 = "CWE-922"  # Insecure Configuration
    CWE_939 = "CWE-939"  # Improper Authorization in an API
    CWE_1004 = "CWE-1004"  # Unintended Expiration of Cache
    CWE_1173 = "CWE-1173"  # Improper Link Resolution Before File Access
    CWE_918 = "CWE-918"  # Server-Side Request Forgery (SSRF)
    CWE_639 = "CWE-639"  # Authorization Bypass Through User-Controlled Key
    CWE_74 = "CWE-74"  # Improper Neutralization of Special Elements
    CWE_489 = "CWE-489"  # Debug Features
    CWE_1104 = "CWE-1104"  # Use of Unmaintained Third-Party Components
    CWE_506 = "CWE-506"  # Embedded Malicious Code
    CWE_20 = "CWE-20"  # Improper Input Validation

class VulnerabilityType(Enum):
    """Standardized vulnerability types."""
    # Injection vulnerabilities
    XSS_REFLECTED = "xss_reflected"
    XSS_STORED = "xss_stored"
    XSS_DOM = "xss_dom"
    SQL_INJECTION = "sql_injection"
    COMMAND_INJECTION = "command_injection"
    PATH_TRAVERSAL = "path_traversal"
    SSRF = "ssrf"
    AI_PROMPT_INJECTION = "ai_prompt_injection"
    
    # LLM Application vulnerabilities (OWASP Top 10 for LLM Applications 2025)
    LLM_PROMPT_INJECTION = "llm_prompt_injection"
    LLM_INJECTION = "llm_injection"
    LLM_SENSITIVE_INFO_DISCLOSURE = "llm_sensitive_info_disclosure"
    LLM_INSUFFICIENT_ALIGNMENT = "llm_insufficient_alignment"
    LLM_DENIAL_OF_SERVICE = "llm_denial_of_service"
    LLM_SUPPLY_CHAIN_VULNERABILITIES = "llm_supply_chain_vulnerabilities"
    LLM_EXCESSIVE_AGENCY = "llm_excessive_agency"
    LLM_OVERRELIANCE = "llm_overreliance"
    LLM_MODEL_THEFT = "llm_model_theft"
    LLM_INSUFFICIENT_LOGGING = "llm_insufficient_logging"
    
    # Access control vulnerabilities
    IDOR = "idor"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    UNAUTHORIZED_ACCESS = "unauthorized_access"
    
    # Authentication and session management
    CSRF = "csrf"
    WEAK_AUTHENTICATION = "weak_authentication"
    SESSION_FIXATION = "session_fixation"
    
    # Cryptographic failures
    SECRETS_EXPOSURE = "secrets_exposure"
    WEAK_ENCRYPTION = "weak_encryption"
    WEAK_RANDOM = "weak_random"
    CRYPTOGRAPHIC_KEY_EXPOSURE = "cryptographic_key_exposure"
    
    # Security misconfiguration
    MISSING_SECURITY_HEADERS = "missing_security_headers"
    INSECURE_CORS = "insecure_cors"
    DEBUG_MODE_ENABLED = "debug_mode_enabled"
    INSECURE_CONFIGURATION = "insecure_configuration"
    
    # Vulnerable components
    VULNERABLE_DEPENDENCY = "vulnerable_dependency"
    OUTDATED_DEPENDENCY = "outdated_dependency"
    MALICIOUS_PACKAGE = "malicious_package"
    TYPOSQUATTING = "typosquatting"

@dataclass
class VulnerabilityTypeInfo:
    """Information about a vulnerability type."""
    type: VulnerabilityType
    description: str
    category: VulnerabilityCategory
    cwe_codes: List[CWECode] = field(default_factory=list)
    remediation: str = ""
    references: List[str] = field(default_factory=list)
    severity_mapping: Dict[str, str] = field(default_factory=dict)

class VulnerabilityTypeRegistry:
    """Registry for vulnerability types and their information."""
    
    def __init__(self):
        self._registry: Dict[VulnerabilityType, VulnerabilityTypeInfo] = {}
        self._initialize_registry()
    
    def _initialize_registry(self):
        """Initialize the vulnerability type registry."""
        
        # XSS vulnerabilities
        self._registry[VulnerabilityType.XSS_REFLECTED] = VulnerabilityTypeInfo(
            type=VulnerabilityType.XSS_REFLECTED,
            description="Reflected Cross-Site Scripting (XSS) vulnerability where user input is reflected in the response without proper sanitization",
            category=VulnerabilityCategory.INJECTION,
            cwe_codes=[CWECode.CWE_79],
            remediation="Implement proper input validation and output encoding. Use Content Security Policy (CSP) headers.",
            references=[
                "https://owasp.org/www-community/attacks/xss/",
                "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
            ],
            severity_mapping={"critical": "critical", "high": "high", "medium": "medium", "low": "low"}
        )
        
        self._registry[VulnerabilityType.XSS_STORED] = VulnerabilityTypeInfo(
            type=VulnerabilityType.XSS_STORED,
            description="Stored Cross-Site Scripting (XSS) vulnerability where malicious scripts are stored on the server",
            category=VulnerabilityCategory.INJECTION,
            cwe_codes=[CWECode.CWE_79],
            remediation="Implement proper input validation, output encoding, and Content Security Policy (CSP).",
            references=[
                "https://owasp.org/www-community/attacks/xss/",
                "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
            ]
        )
        
        self._registry[VulnerabilityType.XSS_DOM] = VulnerabilityTypeInfo(
            type=VulnerabilityType.XSS_DOM,
            description="DOM-based Cross-Site Scripting (XSS) vulnerability where the attack is executed in the client-side DOM",
            category=VulnerabilityCategory.INJECTION,
            cwe_codes=[CWECode.CWE_79],
            remediation="Avoid using dangerous DOM manipulation methods with user input. Implement proper input validation.",
            references=[
                "https://owasp.org/www-community/attacks/DOM_Based_XSS",
                "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html"
            ]
        )
        
        # SQL Injection
        self._registry[VulnerabilityType.SQL_INJECTION] = VulnerabilityTypeInfo(
            type=VulnerabilityType.SQL_INJECTION,
            description="SQL Injection vulnerability where malicious SQL code is inserted into application queries",
            category=VulnerabilityCategory.INJECTION,
            cwe_codes=[CWECode.CWE_89],
            remediation="Use parameterized queries (prepared statements) and avoid dynamic SQL construction.",
            references=[
                "https://owasp.org/www-community/attacks/SQL_Injection",
                "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
            ]
        )
        
        # Command Injection
        self._registry[VulnerabilityType.COMMAND_INJECTION] = VulnerabilityTypeInfo(
            type=VulnerabilityType.COMMAND_INJECTION,
            description="Command Injection vulnerability where malicious commands are executed on the system",
            category=VulnerabilityCategory.INJECTION,
            cwe_codes=[CWECode.CWE_78],
            remediation="Avoid executing system commands with user input. Use safe alternatives and proper input validation.",
            references=[
                "https://owasp.org/www-community/attacks/Command_Injection",
                "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html"
            ]
        )
        
        # SSRF
        self._registry[VulnerabilityType.SSRF] = VulnerabilityTypeInfo(
            type=VulnerabilityType.SSRF,
            description="Server-Side Request Forgery (SSRF) vulnerability where the server makes requests to unintended locations",
            category=VulnerabilityCategory.SSRF,
            cwe_codes=[CWECode.CWE_918],
            remediation="Implement proper URL validation, use allowlists for allowed domains, and avoid user-controlled URLs.",
            references=[
                "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery",
                "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
            ]
        )
        
        # Access Control
        self._registry[VulnerabilityType.IDOR] = VulnerabilityTypeInfo(
            type=VulnerabilityType.IDOR,
            description="Insecure Direct Object Reference (IDOR) vulnerability where direct references to objects are not properly validated",
            category=VulnerabilityCategory.BROKEN_ACCESS_CONTROL,
            cwe_codes=[CWECode.CWE_639],
            remediation="Implement proper authorization checks and use indirect object references.",
            references=[
                "https://owasp.org/www-community/attacks/Insecure_Direct_Object_References",
                "https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html"
            ]
        )
        
        # CSRF
        self._registry[VulnerabilityType.CSRF] = VulnerabilityTypeInfo(
            type=VulnerabilityType.CSRF,
            description="Cross-Site Request Forgery (CSRF) vulnerability where unauthorized commands are transmitted from a user",
            category=VulnerabilityCategory.BROKEN_ACCESS_CONTROL,
            cwe_codes=[CWECode.CWE_352],
            remediation="Implement CSRF tokens, SameSite cookies, and proper referrer validation.",
            references=[
                "https://owasp.org/www-community/attacks/csrf",
                "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
            ]
        )
        
        # Secrets Exposure
        self._registry[VulnerabilityType.SECRETS_EXPOSURE] = VulnerabilityTypeInfo(
            type=VulnerabilityType.SECRETS_EXPOSURE,
            description="Exposure of sensitive information such as API keys, passwords, or tokens",
            category=VulnerabilityCategory.CRYPTOGRAPHIC_FAILURES,
            cwe_codes=[CWECode.CWE_798, CWECode.CWE_200],
            remediation="Remove hardcoded secrets, use environment variables, and implement proper secret management.",
            references=[
                "https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_credentials",
                "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
            ]
        )
        
        # Vulnerable Dependencies
        self._registry[VulnerabilityType.VULNERABLE_DEPENDENCY] = VulnerabilityTypeInfo(
            type=VulnerabilityType.VULNERABLE_DEPENDENCY,
            description="Use of vulnerable or outdated third-party components",
            category=VulnerabilityCategory.VULNERABLE_COMPONENTS,
            cwe_codes=[CWECode.CWE_1104],
            remediation="Update to the latest secure versions of dependencies and implement dependency scanning.",
            references=[
                "https://owasp.org/www-community/vulnerabilities/Using_Components_with_Known_Vulnerabilities",
                "https://cheatsheetseries.owasp.org/cheatsheets/Vulnerable_Dependency_Management_Cheat_Sheet.html"
            ]
        )
        
        self._registry[VulnerabilityType.OUTDATED_DEPENDENCY] = VulnerabilityTypeInfo(
            type=VulnerabilityType.OUTDATED_DEPENDENCY,
            description="Use of outdated dependencies that may contain security vulnerabilities",
            category=VulnerabilityCategory.VULNERABLE_COMPONENTS,
            cwe_codes=[CWECode.CWE_1104],
            remediation="Regularly update dependencies and implement automated dependency scanning.",
            references=[
                "https://owasp.org/www-community/vulnerabilities/Using_Components_with_Known_Vulnerabilities"
            ]
        )
        
        self._registry[VulnerabilityType.TYPOSQUATTING] = VulnerabilityTypeInfo(
            type=VulnerabilityType.TYPOSQUATTING,
            description="Use of typosquatted packages that may be malicious or contain vulnerabilities",
            category=VulnerabilityCategory.VULNERABLE_COMPONENTS,
            cwe_codes=[CWECode.CWE_506, CWECode.CWE_20],
            remediation="Verify package names carefully and use trusted package repositories.",
            references=[
                "https://owasp.org/www-community/attacks/Typosquatting_Attack"
            ]
        )
        
        # Security Misconfiguration
        self._registry[VulnerabilityType.MISSING_SECURITY_HEADERS] = VulnerabilityTypeInfo(
            type=VulnerabilityType.MISSING_SECURITY_HEADERS,
            description="Missing or misconfigured security headers",
            category=VulnerabilityCategory.SECURITY_MISCONFIGURATION,
            cwe_codes=[CWECode.CWE_693],
            remediation="Implement proper security headers like CSP, HSTS, X-Frame-Options, etc.",
            references=[
                "https://owasp.org/www-community/controls/HTTP_Headers",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html"
            ]
        )
        
        self._registry[VulnerabilityType.DEBUG_MODE_ENABLED] = VulnerabilityTypeInfo(
            type=VulnerabilityType.DEBUG_MODE_ENABLED,
            description="Debug mode or development features enabled in production",
            category=VulnerabilityCategory.SECURITY_MISCONFIGURATION,
            cwe_codes=[CWECode.CWE_489],
            remediation="Disable debug mode and development features in production environments.",
            references=[
                "https://owasp.org/www-community/vulnerabilities/Debug_Features"
            ]
        )
        
        self._registry[VulnerabilityType.INSECURE_CONFIGURATION] = VulnerabilityTypeInfo(
            type=VulnerabilityType.INSECURE_CONFIGURATION,
            description="Insecure configuration settings that may lead to security vulnerabilities",
            category=VulnerabilityCategory.SECURITY_MISCONFIGURATION,
            cwe_codes=[CWECode.CWE_922],
            remediation="Review and secure all configuration settings according to security best practices.",
            references=[
                "https://owasp.org/www-community/vulnerabilities/Security_Misconfiguration"
            ]
        )
        
        # AI-specific vulnerabilities
        self._registry[VulnerabilityType.AI_PROMPT_INJECTION] = VulnerabilityTypeInfo(
            type=VulnerabilityType.AI_PROMPT_INJECTION,
            description="AI prompt injection vulnerability where malicious prompts can manipulate AI behavior",
            category=VulnerabilityCategory.AI_SPECIFIC,
            cwe_codes=[CWECode.CWE_74],  # Improper Neutralization of Special Elements
            remediation="Implement prompt validation, output filtering, and proper AI model security controls.",
            references=[
                "https://owasp.org/www-community/attacks/Prompt_Injection",
                "https://cheatsheetseries.owasp.org/cheatsheets/AI_Prompt_Injection_Defense_Cheat_Sheet.html"
            ]
        )
    
    def get_type_info(self, vuln_type: VulnerabilityType) -> Optional[VulnerabilityTypeInfo]:
        """Get information for a vulnerability type."""
        return self._registry.get(vuln_type)
    
    def get_types_by_category(self, category: VulnerabilityCategory) -> List[VulnerabilityType]:
        """Get all vulnerability types in a category."""
        return [
            vuln_type for vuln_type, info in self._registry.items()
            if info.category == category
        ]
    
    def get_types_by_cwe(self, cwe_code: CWECode) -> List[VulnerabilityType]:
        """Get all vulnerability types associated with a CWE code."""
        return [
            vuln_type for vuln_type, info in self._registry.items()
            if cwe_code in info.cwe_codes
        ]
    
    def normalize_type_string(self, type_string: str) -> Optional[VulnerabilityType]:
        """Normalize a vulnerability type string to a VulnerabilityType enum."""
        # Clean the input string
        normalized = type_string.lower().strip().replace(' ', '_').replace('-', '_')
        
        # Try to find by enum value directly
        try:
            return VulnerabilityType(normalized)
        except ValueError:
            pass
        
        return None
    
    def get_all_types(self) -> List[VulnerabilityType]:
        """Get all registered vulnerability types."""
        return list(self._registry.keys())

# Global registry instance
vulnerability_type_registry = VulnerabilityTypeRegistry()

# Convenience functions
def normalize_vulnerability_type(type_string: str) -> Optional[VulnerabilityType]:
    """Normalize a vulnerability type string to a VulnerabilityType enum."""
    return vulnerability_type_registry.normalize_type_string(type_string)

def get_vulnerability_type_info(vuln_type: VulnerabilityType) -> Optional[VulnerabilityTypeInfo]:
    """Get information for a vulnerability type."""
    return vulnerability_type_registry.get_type_info(vuln_type)

def get_owasp_category(vuln_type: VulnerabilityType) -> Optional[VulnerabilityCategory]:
    """Get the OWASP category for a vulnerability type."""
    info = vulnerability_type_registry.get_type_info(vuln_type)
    return info.category if info else None

def get_cwe_codes(vuln_type: VulnerabilityType) -> List[CWECode]:
    """Get CWE codes for a vulnerability type."""
    info = vulnerability_type_registry.get_type_info(vuln_type)
    return info.cwe_codes if info else []
