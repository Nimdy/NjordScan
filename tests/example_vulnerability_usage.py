#!/usr/bin/env python3
"""
Example showing proper usage of the standardized vulnerability types.
"""

import sys
from pathlib import Path

# Add the project root to the path
sys.path.insert(0, str(Path(__file__).parent))

from njordscan.vulnerability_types import VulnerabilityType
from njordscan.modules.base import BaseModule
from njordscan.config import Config
from njordscan.vulnerability import VulnerabilityIdGenerator

class ExampleModule(BaseModule):
    """Example module showing proper vulnerability type usage."""
    
    async def scan(self, target: str):
        """Example scan method using standardized vulnerability types."""
        vulnerabilities = []
        
        # ‚úÖ CORRECT: Use standardized vulnerability types
        vuln1 = self.create_vulnerability(
            title="Reflected XSS Vulnerability",
            description="User input is reflected without sanitization",
            severity="high",
            vuln_type="xss_reflected",  # Standardized type
            file_path="src/components/UserInput.jsx",
            line_number=42
        )
        vulnerabilities.append(vuln1)
        
        # ‚úÖ CORRECT: Use standardized vulnerability types
        vuln2 = self.create_vulnerability(
            title="SQL Injection Vulnerability", 
            description="SQL query uses string concatenation",
            severity="critical",
            vuln_type="sql_injection",  # Standardized type
            file_path="src/api/users.js",
            line_number=15
        )
        vulnerabilities.append(vuln2)
        
        # ‚úÖ CORRECT: Use standardized vulnerability types
        vuln3 = self.create_vulnerability(
            title="Hardcoded API Key",
            description="API key is hardcoded in source code",
            severity="critical", 
            vuln_type="secrets_exposure",  # Standardized type
            file_path="config/api.js",
            line_number=8
        )
        vulnerabilities.append(vuln3)
        
        # ‚úÖ CORRECT: Use standardized vulnerability types
        vuln4 = self.create_vulnerability(
            title="SSRF Vulnerability",
            description="User-controlled URL in fetch request",
            severity="high",
            vuln_type="ssrf",  # Standardized type
            file_path="src/utils/fetcher.js",
            line_number=23
        )
        vulnerabilities.append(vuln4)
        
        # ‚ùå INCORRECT: This will generate a warning
        vuln5 = self.create_vulnerability(
            title="Custom Vulnerability",
            description="Some custom vulnerability",
            severity="medium",
            vuln_type="custom_vuln",  # Not a standardized type - will warn
            file_path="src/custom.js",
            line_number=10
        )
        vulnerabilities.append(vuln5)
        
        return vulnerabilities

def main():
    """Run the example."""
    print("üõ°Ô∏è Vulnerability Type Usage Example")
    print("=" * 50)
    
    # Create example module
    config = Config()
    vuln_id_generator = VulnerabilityIdGenerator()
    module = ExampleModule(config, vuln_id_generator)
    
    # Run scan
    import asyncio
    vulnerabilities = asyncio.run(module.scan("."))
    
    print(f"\nüìä Found {len(vulnerabilities)} vulnerabilities:")
    
    for vuln in vulnerabilities:
        print(f"\nüîç {vuln.title}")
        print(f"   Type: {vuln.vuln_type}")
        print(f"   Severity: {vuln.severity.value}")
        print(f"   File: {vuln.file_path}:{vuln.line_number}")
        
        # Show enhanced metadata
        if vuln.metadata:
            if 'cwe_codes' in vuln.metadata:
                print(f"   CWE: {', '.join(vuln.metadata['cwe_codes'])}")
            if 'owasp_category' in vuln.metadata:
                print(f"   OWASP: {vuln.metadata['owasp_category']}")
        
        print(f"   Fix: {vuln.fix[:100]}...")
    
    print(f"\n‚úÖ Example completed!")
    print(f"\nüí° Key Points:")
    print(f"   ‚Ä¢ Use standardized vulnerability types from VulnerabilityType enum")
    print(f"   ‚Ä¢ Types are automatically enhanced with CWE codes and OWASP categories")
    print(f"   ‚Ä¢ Invalid types will generate warnings")
    print(f"   ‚Ä¢ All vulnerability information is standardized and consistent")

if __name__ == "__main__":
    main()
