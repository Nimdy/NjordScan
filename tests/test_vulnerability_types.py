#!/usr/bin/env python3
"""
Test script to validate vulnerability type standardization.
"""

import sys
from pathlib import Path

# Add the project root to the path
sys.path.insert(0, str(Path(__file__).parent))

from njordscan.vulnerability_types import (
    VulnerabilityType, VulnerabilityCategory, CWECode,
    vulnerability_type_registry, normalize_vulnerability_type,
    get_vulnerability_type_info, get_owasp_category, get_cwe_codes
)

def test_vulnerability_type_normalization():
    """Test vulnerability type normalization."""
    print("🧪 Testing vulnerability type normalization...")
    
    test_cases = [
        # Direct enum value matches
        ("xss_reflected", VulnerabilityType.XSS_REFLECTED),
        ("xss_stored", VulnerabilityType.XSS_STORED),
        ("xss_dom", VulnerabilityType.XSS_DOM),
        ("sql_injection", VulnerabilityType.SQL_INJECTION),
        ("command_injection", VulnerabilityType.COMMAND_INJECTION),
        ("ssrf", VulnerabilityType.SSRF),
        ("csrf", VulnerabilityType.CSRF),
        ("secrets_exposure", VulnerabilityType.SECRETS_EXPOSURE),
        ("ai_prompt_injection", VulnerabilityType.AI_PROMPT_INJECTION),
        
        # Case insensitive
        ("XSS_REFLECTED", VulnerabilityType.XSS_REFLECTED),
        ("SQL_INJECTION", VulnerabilityType.SQL_INJECTION),
        
        # With spaces and dashes
        ("xss reflected", VulnerabilityType.XSS_REFLECTED),
        ("sql-injection", VulnerabilityType.SQL_INJECTION),
        ("command injection", VulnerabilityType.COMMAND_INJECTION),
        
        # Invalid types
        ("invalid_type", None),
        ("", None),
        ("xss_invalid", None),
    ]
    
    print("\n📋 Testing type normalization:")
    for input_type, expected in test_cases:
        result = normalize_vulnerability_type(input_type)
        status = "✅" if result == expected else "❌"
        print(f"  {status} '{input_type}' -> {result.value if result else 'None'}")
        if result != expected:
            print(f"    Expected: {expected.value if expected else 'None'}")
    
    print("\n📊 Normalization test completed!")

def test_vulnerability_type_info():
    """Test vulnerability type information retrieval."""
    print("\n🧪 Testing vulnerability type information...")
    
    test_types = [
        VulnerabilityType.XSS_REFLECTED,
        VulnerabilityType.SQL_INJECTION,
        VulnerabilityType.COMMAND_INJECTION,
        VulnerabilityType.SSRF,
        VulnerabilityType.CSRF,
        VulnerabilityType.SECRETS_EXPOSURE,
        VulnerabilityType.AI_PROMPT_INJECTION
    ]
    
    print("\n📋 Testing type information retrieval:")
    for vuln_type in test_types:
        info = get_vulnerability_type_info(vuln_type)
        if info:
            print(f"  ✅ {vuln_type.value}:")
            print(f"    Category: {info.category.value}")
            print(f"    CWE Codes: {[cwe.value for cwe in info.cwe_codes]}")
            print(f"    Severity Range: {info.severity_range}")
            print(f"    Description: {info.description[:100]}...")
        else:
            print(f"  ❌ {vuln_type.value}: No information found")
    
    print("\n📊 Type information test completed!")

def test_owasp_categories():
    """Test OWASP category mapping."""
    print("\n🧪 Testing OWASP category mapping...")
    
    test_types = [
        VulnerabilityType.XSS_REFLECTED,
        VulnerabilityType.SQL_INJECTION,
        VulnerabilityType.COMMAND_INJECTION,
        VulnerabilityType.SSRF,
        VulnerabilityType.CSRF,
        VulnerabilityType.SECRETS_EXPOSURE
    ]
    
    print("\n📋 Testing OWASP category mapping:")
    for vuln_type in test_types:
        category = get_owasp_category(vuln_type)
        if category:
            print(f"  ✅ {vuln_type.value} -> {category.value}")
        else:
            print(f"  ❌ {vuln_type.value} -> No category found")
    
    print("\n📊 OWASP category test completed!")

def test_cwe_mapping():
    """Test CWE code mapping."""
    print("\n🧪 Testing CWE code mapping...")
    
    test_types = [
        VulnerabilityType.XSS_REFLECTED,
        VulnerabilityType.SQL_INJECTION,
        VulnerabilityType.COMMAND_INJECTION,
        VulnerabilityType.SSRF,
        VulnerabilityType.CSRF
    ]
    
    print("\n📋 Testing CWE code mapping:")
    for vuln_type in test_types:
        cwe_codes = get_cwe_codes(vuln_type)
        if cwe_codes:
            print(f"  ✅ {vuln_type.value} -> {[cwe.value for cwe in cwe_codes]}")
        else:
            print(f"  ❌ {vuln_type.value} -> No CWE codes found")
    
    print("\n📊 CWE mapping test completed!")

def test_registry_completeness():
    """Test registry completeness."""
    print("\n🧪 Testing registry completeness...")
    
    all_types = list(VulnerabilityType)
    registered_types = vulnerability_type_registry.get_all_types()
    
    print(f"\n📊 Registry Statistics:")
    print(f"  Total vulnerability types: {len(all_types)}")
    print(f"  Registered types: {len(registered_types)}")
    print(f"  Coverage: {len(registered_types)/len(all_types)*100:.1f}%")
    
    missing_types = set(all_types) - set(registered_types)
    if missing_types:
        print(f"\n⚠️ Missing types in registry:")
        for vuln_type in missing_types:
            print(f"  • {vuln_type.value}")
    else:
        print(f"\n✅ All vulnerability types are registered!")
    
    print("\n📊 Registry completeness test completed!")

def main():
    """Run all tests."""
    print("🛡️ Vulnerability Type Standardization Test Suite")
    print("=" * 60)
    
    try:
        test_vulnerability_type_normalization()
        test_vulnerability_type_info()
        test_owasp_categories()
        test_cwe_mapping()
        test_registry_completeness()
        
        print("\n🎉 All tests completed successfully!")
        
    except Exception as e:
        print(f"\n❌ Test failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
