#!/usr/bin/env python3
"""
Test vulnerability type integration with security modules.

Ensures that all security modules are using the standardized vulnerability types
and that the type enhancement system is working correctly.
"""

import asyncio
import json
import tempfile
import shutil
from pathlib import Path
import sys

# Add the project root to the path
sys.path.insert(0, str(Path(__file__).parent))

from njordscan.modules.dependencies import DependenciesModule
from njordscan.modules.configs import ConfigsModule
from njordscan.modules.runtime import RuntimeModule
from njordscan.config import Config
from njordscan.vulnerability import VulnerabilityIdGenerator
from njordscan.vulnerability_types import VulnerabilityType, normalize_vulnerability_type

class VulnerabilityTypeIntegrationTester:
    """Tests vulnerability type integration across security modules."""
    
    def __init__(self):
        self.config = Config()
        self.vuln_id_generator = VulnerabilityIdGenerator()
        self.test_results = []
    
    async def run_integration_tests(self):
        """Run all vulnerability type integration tests."""
        print("üîó Vulnerability Type Integration Testing")
        print("=" * 50)
        
        # Create test environment
        test_dir = await self._create_test_environment()
        
        try:
            # Test dependency module integration
            print("\nüì¶ Testing Dependency Module Integration...")
            await self._test_dependency_module_integration(test_dir)
            
            # Test configuration module integration
            print("\n‚öôÔ∏è Testing Configuration Module Integration...")
            await self._test_config_module_integration(test_dir)
            
            # Test runtime module integration
            print("\nüåê Testing Runtime Module Integration...")
            await self._test_runtime_module_integration()
            
            # Test vulnerability type enhancement
            print("\n‚ú® Testing Vulnerability Type Enhancement...")
            await self._test_vulnerability_enhancement(test_dir)
            
            # Print summary
            self._print_integration_summary()
            
        finally:
            # Cleanup test environment
            shutil.rmtree(test_dir, ignore_errors=True)
    
    async def _create_test_environment(self) -> Path:
        """Create a minimal test environment."""
        test_dir = Path(tempfile.mkdtemp(prefix="njordscan_integration_test_"))
        
        # Create package.json with known vulnerable packages
        package_json = {
            "name": "integration-test-app",
            "dependencies": {
                "request": "^2.88.0",  # Should trigger deprecated_package
                "loadash": "^4.17.0",  # Should trigger typosquatting
                "vulnerable-package": "*"  # Should trigger unpinned_version
            }
        }
        
        with open(test_dir / "package.json", "w") as f:
            json.dump(package_json, f, indent=2)
        
        # Create .env with secrets
        env_content = """NEXT_PUBLIC_API_KEY=sk-1234567890abcdef1234567890abcdef12345678
DATABASE_PASSWORD=your_key_here"""
        
        with open(test_dir / ".env", "w") as f:
            f.write(env_content)
        
        # Create config with hardcoded secrets
        config_content = """const config = {
  apiKey: "sk-1234567890abcdef1234567890abcdef12345678"
};"""
        
        with open(test_dir / "config.js", "w") as f:
            f.write(config_content)
        
        return test_dir
    
    async def _test_dependency_module_integration(self, test_dir: Path):
        """Test dependency module vulnerability type integration."""
        module = DependenciesModule(self.config, self.vuln_id_generator)
        
        try:
            vulnerabilities = await module.scan(str(test_dir))
            
            # Check that vulnerabilities use standardized types
            standardized_types = []
            for vuln in vulnerabilities:
                # Check if the vulnerability type is standardized
                normalized_type = normalize_vulnerability_type(vuln.vuln_type)
                if normalized_type:
                    standardized_types.append(normalized_type.value)
                    
                    # Check that metadata is enhanced
                    if 'cwe_codes' in vuln.metadata:
                        self._record_result(True, f"‚úÖ {vuln.vuln_type} has CWE codes: {vuln.metadata['cwe_codes']}")
                    else:
                        self._record_result(False, f"‚ùå {vuln.vuln_type} missing CWE codes")
                    
                    if 'owasp_category' in vuln.metadata:
                        self._record_result(True, f"‚úÖ {vuln.vuln_type} has OWASP category: {vuln.metadata['owasp_category']}")
                    else:
                        self._record_result(False, f"‚ùå {vuln.vuln_type} missing OWASP category")
            
            if len(standardized_types) > 0:
                self._record_result(True, f"‚úÖ Found {len(standardized_types)} standardized vulnerability types: {standardized_types}")
            else:
                self._record_result(False, "‚ùå No standardized vulnerability types found")
                
        except Exception as e:
            self._record_result(False, f"‚ùå Dependency module integration test failed: {str(e)}")
    
    async def _test_config_module_integration(self, test_dir: Path):
        """Test configuration module vulnerability type integration."""
        module = ConfigsModule(self.config, self.vuln_id_generator)
        
        try:
            vulnerabilities = await module.scan(str(test_dir))
            
            # Check for specific vulnerability types
            expected_types = ['secrets_exposure']
            found_types = [v.vuln_type for v in vulnerabilities]
            
            for expected_type in expected_types:
                if expected_type in found_types:
                    self._record_result(True, f"‚úÖ Found expected vulnerability type: {expected_type}")
                else:
                    self._record_result(False, f"‚ùå Missing expected vulnerability type: {expected_type}")
            
            # Check vulnerability enhancement
            enhanced_vulns = [v for v in vulnerabilities if 'cwe_codes' in v.metadata]
            if len(enhanced_vulns) > 0:
                self._record_result(True, f"‚úÖ {len(enhanced_vulns)} vulnerabilities have enhanced metadata")
            else:
                self._record_result(False, "‚ùå No vulnerabilities have enhanced metadata")
                
        except Exception as e:
            self._record_result(False, f"‚ùå Configuration module integration test failed: {str(e)}")
    
    async def _test_runtime_module_integration(self):
        """Test runtime module vulnerability type integration."""
        module = RuntimeModule(self.config, self.vuln_id_generator)
        
        try:
            # Test that the module can create vulnerabilities with standardized types
            test_vuln = module.create_vulnerability(
                title="Test XSS Vulnerability",
                description="Test XSS vulnerability for integration testing",
                severity="high",
                vuln_type="xss_reflected"  # Standardized type
            )
            
            # Check that the vulnerability was enhanced
            if 'cwe_codes' in test_vuln.metadata:
                self._record_result(True, f"‚úÖ Runtime module enhanced XSS vulnerability with CWE codes: {test_vuln.metadata['cwe_codes']}")
            else:
                self._record_result(False, "‚ùå Runtime module failed to enhance XSS vulnerability")
            
            if 'owasp_category' in test_vuln.metadata:
                self._record_result(True, f"‚úÖ Runtime module enhanced XSS vulnerability with OWASP category: {test_vuln.metadata['owasp_category']}")
            else:
                self._record_result(False, "‚ùå Runtime module failed to enhance XSS vulnerability with OWASP category")
            
            # Test SQL injection type
            test_sqli = module.create_vulnerability(
                title="Test SQL Injection",
                description="Test SQL injection for integration testing",
                severity="critical",
                vuln_type="sql_injection"  # Standardized type
            )
            
            if 'cwe_codes' in test_sqli.metadata:
                self._record_result(True, f"‚úÖ Runtime module enhanced SQL injection with CWE codes: {test_sqli.metadata['cwe_codes']}")
            else:
                self._record_result(False, "‚ùå Runtime module failed to enhance SQL injection")
                
        except Exception as e:
            self._record_result(False, f"‚ùå Runtime module integration test failed: {str(e)}")
    
    async def _test_vulnerability_enhancement(self, test_dir: Path):
        """Test vulnerability type enhancement system."""
        module = DependenciesModule(self.config, self.vuln_id_generator)
        
        try:
            vulnerabilities = await module.scan(str(test_dir))
            
            # Test enhancement for different vulnerability types
            enhancement_tests = {
                'typosquatting': ['CWE-506', 'CWE-20'],  # Expected CWE codes
                'deprecated_package': ['CWE-1104'],  # Expected CWE codes
                'unpinned_version': ['CWE-1104']  # Expected CWE codes
            }
            
            for vuln in vulnerabilities:
                vuln_type = vuln.vuln_type
                if vuln_type in enhancement_tests:
                    expected_cwes = enhancement_tests[vuln_type]
                    actual_cwes = vuln.metadata.get('cwe_codes', [])
                    
                    # Check if any expected CWE codes are present
                    found_expected = any(cwe in actual_cwes for cwe in expected_cwes)
                    
                    if found_expected:
                        self._record_result(True, f"‚úÖ {vuln_type} has expected CWE codes: {actual_cwes}")
                    else:
                        self._record_result(False, f"‚ùå {vuln_type} missing expected CWE codes. Expected: {expected_cwes}, Found: {actual_cwes}")
                    
                    # Check OWASP category
                    if 'owasp_category' in vuln.metadata:
                        self._record_result(True, f"‚úÖ {vuln_type} has OWASP category: {vuln.metadata['owasp_category']}")
                    else:
                        self._record_result(False, f"‚ùå {vuln_type} missing OWASP category")
            
            # Test that all vulnerabilities have proper fix recommendations
            vulns_with_fixes = [v for v in vulnerabilities if v.fix and len(v.fix) > 10]
            if len(vulns_with_fixes) == len(vulnerabilities):
                self._record_result(True, f"‚úÖ All {len(vulnerabilities)} vulnerabilities have fix recommendations")
            else:
                self._record_result(False, f"‚ùå Only {len(vulns_with_fixes)}/{len(vulnerabilities)} vulnerabilities have fix recommendations")
            
            # Test that all vulnerabilities have references
            vulns_with_refs = [v for v in vulnerabilities if v.reference and len(v.reference) > 10]
            if len(vulns_with_refs) == len(vulnerabilities):
                self._record_result(True, f"‚úÖ All {len(vulnerabilities)} vulnerabilities have references")
            else:
                self._record_result(False, f"‚ùå Only {len(vulns_with_refs)}/{len(vulnerabilities)} vulnerabilities have references")
                
        except Exception as e:
            self._record_result(False, f"‚ùå Vulnerability enhancement test failed: {str(e)}")
    
    def _record_result(self, passed: bool, message: str):
        """Record a test result."""
        self.test_results.append({
            'passed': passed,
            'message': message
        })
        print(f"  {message}")
    
    def _print_integration_summary(self):
        """Print integration test summary."""
        print("\n" + "=" * 50)
        print("üìä INTEGRATION TEST SUMMARY")
        print("=" * 50)
        
        passed = sum(1 for result in self.test_results if result['passed'])
        failed = sum(1 for result in self.test_results if not result['passed'])
        total = len(self.test_results)
        
        print(f"\nüéØ Results: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
        
        if failed > 0:
            print(f"\n‚ùå Failed Tests:")
            for result in self.test_results:
                if not result['passed']:
                    print(f"   {result['message']}")
        
        if failed == 0:
            print("\nüéâ All vulnerability type integration tests passed!")
            print("‚úÖ Security modules are properly integrated with the vulnerability type system")
        else:
            print(f"\n‚ö†Ô∏è {failed} integration tests failed. Review the issues above.")

async def main():
    """Run the vulnerability type integration tests."""
    tester = VulnerabilityTypeIntegrationTester()
    await tester.run_integration_tests()

if __name__ == "__main__":
    asyncio.run(main())
